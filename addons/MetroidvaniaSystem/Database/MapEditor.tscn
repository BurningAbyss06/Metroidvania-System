[gd_scene load_steps=11 format=3 uid="uid://dfbykrvyqnqr5"]

[ext_resource type="Script" path="res://addons/MetroidvaniaSystem/Database/MapEditor.gd" id="1_i7yda"]
[ext_resource type="Script" path="res://addons/MetroidvaniaSystem/Database/MapOverlay.gd" id="2_w1wnt"]

[sub_resource type="ButtonGroup" id="ButtonGroup_pv7fp"]

[sub_resource type="GDScript" id="GDScript_dsps8"]
resource_name = "RoomLayout"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/SubEditor.gd\"

var erase_mode: bool

func _editor_init() -> void:
	room_only_cursor = false

func _editor_exit():
	theme_cache.cursor_color = get_theme_color(&\"cursor_color\", &\"MetSys\")

func _editor_input(event: InputEvent):
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_LEFT:
			if event.pressed:
				drag_from = get_cursor_pos()
			else:
				var rect := get_rect_between(drag_from, get_cursor_pos())
				rect.position -= editor.map.position / MetSys.ROOM_SIZE
				update_rooms(rect)
				drag_from = EDITOR_SCRIPT.NULL_VECTOR2I
		elif event.button_index == MOUSE_BUTTON_RIGHT:
			if event.pressed:
				drag_from = get_cursor_pos()
				erase_mode = true
				theme_cache.cursor_color = get_theme_color(&\"cursor_color_erase\", &\"MetSys\")
				queue_redraw()
			else:
				var rect := get_rect_between(drag_from, get_cursor_pos())
				rect.position -= editor.map.position / MetSys.ROOM_SIZE
				erase_rooms(rect)
				erase_mode = false
				theme_cache.cursor_color = get_theme_color(&\"cursor_color\", &\"MetSys\")
				drag_from = EDITOR_SCRIPT.NULL_VECTOR2I

func update_rooms(rect: Rect2i):
	var map_data: MetroidvaniaSystem.MapData = MetSys.map_data
	
	for x in range(rect.position.x, rect.end.x):
		for y in range(rect.position.y, rect.end.y):
			var coords := Vector3i(x, y, editor.current_layer)
			
			var room = map_data.get_room_at(coords)
			if room:
				if x != rect.end.x - 1:
					room.borders[0] = -1
				if y != rect.end.y - 1:
					room.borders[1] = -1
				if x != rect.position.x:
					room.borders[2] = -1
				if y != rect.position.y:
					room.borders[3] = -1
			else:
				room = map_data.create_room_at(coords)
				if x == rect.end.x - 1:
					room.borders[0] = 0
				if y == rect.end.y - 1:
					room.borders[1] = 0
				if x == rect.position.x:
					room.borders[2] = 0
				if y == rect.position.y:
					room.borders[3] = 0
	
	editor.map.queue_redraw()

func erase_rooms(rect: Rect2i):
	var map_data: MetroidvaniaSystem.MapData = MetSys.map_data
	
	for x in range(rect.position.x, rect.end.x):
		for y in range(rect.position.y, rect.end.y):
			var coords := Vector3i(x, y, editor.current_layer)
			var room_data := map_data.get_room_at(coords)
			
			if not room_data:
				continue
			
			if x == rect.end.x - 1:
				close_border(Vector2i(x + 1, y), 2)
			if y == rect.end.y - 1:
				close_border(Vector2i(x, y + 1), 3)
			if x == rect.position.x:
				close_border(Vector2i(x - 1, y), 0)
			if y == rect.position.y:
				close_border(Vector2i(x, y - 1), 1)
			
			map_data.erase_room(coords)
	
	editor.map.queue_redraw()

func close_border(pos: Vector2i, border: int):
	var room: MetroidvaniaSystem.MapData.RoomData = MetSys.map_data.get_room_at(get_coords(pos))
	
	if room:
		room.borders[border] = 0
"

[sub_resource type="GDScript" id="GDScript_ujwfx"]
resource_name = "RoomSymbol"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/SubEditor.gd\"

var symbol_group: ButtonGroup

func _editor_init() -> void:
	room_only_cursor = true
	symbol_group = ButtonGroup.new()
	
	for symbol in MetSys.settings.theme.symbols:
		add_symbol(symbol)

func _editor_enter():
	%Symbols.show()

func _editor_exit():
	%Symbols.hide()

func _editor_input(event: InputEvent):
	if event is InputEventMouseButton:
		if event.pressed:
			var room_data := get_room_at_cursor()
			if not room_data:
				return
			
			if event.button_index == MOUSE_BUTTON_LEFT:
				room_data.symbol = symbol_group.get_pressed_button().get_index()
				editor.map.queue_redraw()
			elif event.button_index == MOUSE_BUTTON_RIGHT:
				room_data.symbol = -1
				editor.map.queue_redraw()

func add_symbol(texture: Texture2D):
	var button := Button.new()
	button.icon = texture
	button.toggle_mode = true
	button.button_group = symbol_group
	
	if not symbol_group.get_pressed_button():
		button.button_pressed = true
	
	%SymbolContainer.add_child(button)
"

[sub_resource type="GDScript" id="GDScript_tlx5u"]
resource_name = "RoomColor"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/SubEditor.gd\"

func _editor_enter():
	%Colors.show()

func _editor_exit():
	%Colors.hide()

func _editor_input(event: InputEvent):
	if event is InputEventMouseButton:
		if event.pressed:
			var room_data := get_room_at_cursor()
			if not room_data:
				return
			
			if event.button_index == MOUSE_BUTTON_LEFT:
				if event.is_command_or_control_pressed():
					if room_data.color.a > 0:
						%CurrentColor.color = room_data.color
				else:
					room_data.color = %CurrentColor.color
					editor.map.queue_redraw()
			elif event.button_index == MOUSE_BUTTON_RIGHT:
				room_data.color = Color.TRANSPARENT
				editor.map.queue_redraw()
	elif event is InputEventMouseMotion:
		if event.button_mask & (MOUSE_BUTTON_MASK_LEFT | MOUSE_BUTTON_MASK_RIGHT):
			var room_data := get_room_at_cursor()
			if not room_data:
				return
			
			var target_color := Color.TRANSPARENT
			if event.button_mask & MOUSE_BUTTON_MASK_LEFT:
				target_color = %CurrentColor.color
			
			if room_data.color != target_color:
				room_data.color = target_color
				editor.map.queue_redraw()
"

[sub_resource type="GDScript" id="GDScript_a80ln"]
resource_name = "RoomGroup"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/SubEditor.gd\"

var room_groups: Dictionary
var drawing: int

func _editor_init() -> void:
	room_only_cursor = true
	room_groups = MetSys.map_data.room_groups

func _update_theme():
	theme_cache.group_color = get_theme_color(&\"group_color\", &\"MetSys\")

func _editor_enter():
	%Groups.show()

func _editor_exit():
	%Groups.hide()

func _editor_draw(map_overlay: CanvasItem):
	super(map_overlay)
	
	for p in room_groups.get(%CurrentGroup.value as int, []):
		map_overlay.draw_rect(Rect2(Vector2(p.x, p.y) * MetSys.ROOM_SIZE, MetSys.ROOM_SIZE), theme_cache.group_color)

func _editor_input(event: InputEvent):
	if event is InputEventMouseMotion:
		editor.map_overlay.queue_redraw()
		
		if drawing != 0:
			var coords := get_coords(get_cursor_pos())
			var current_group: int = %CurrentGroup.value
			
			if drawing & MOUSE_BUTTON_MASK_LEFT != 0:
				var room_data: MetroidvaniaSystem.MapData.RoomData = MetSys.map_data.get_room_at(coords)
				if not room_data:
					return
				
				if not current_group in room_groups:
					room_groups[current_group] = []
				
				if not coords in room_groups[current_group]:
					room_groups[current_group].append(coords)
				editor.map_overlay.queue_redraw()
			elif drawing & MOUSE_BUTTON_MASK_RIGHT != 0:
				if not current_group in room_groups:
					return
				
				var room_data: MetroidvaniaSystem.MapData.RoomData = MetSys.map_data.get_room_at(coords)
				if not room_data:
					return
				
				room_groups[current_group].erase(coords)
				editor.map_overlay.queue_redraw()
	
	if event is InputEventMouseButton:
		drawing = int(event.pressed) * event.button_mask
"

[sub_resource type="GDScript" id="GDScript_ilxbw"]
resource_name = "BorderType"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/SubEditor.gd\"

func _editor_init() -> void:
	use_cursor = false

func _editor_input(event: InputEvent):
	var room_data := get_room_at_cursor()
	
	if event is InputEventMouseMotion:
		if room_data:
			var rel := editor.map_overlay.get_local_mouse_position().posmodv(MetSys.ROOM_SIZE)
			var border := get_square_border_idx(rel)
			
			var new_border := -1
			var borders: Array[int] = room_data.borders
			
			for i in 4:
				if border == i and borders[i] > -1:
					new_border = border
					break
			
			if new_border != highlighted_border:
				highlighted_border = new_border
				editor.map_overlay.queue_redraw()
				
				if highlighted_border != -1 and event.button_mask & MOUSE_BUTTON_MASK_LEFT:
					room_data.borders[highlighted_border] = (borders[highlighted_border] + 1) % MetSys.theme.get_border_count()
					editor.map.queue_redraw()
		else:
			highlighted_border = -1
			editor.map_overlay.queue_redraw()
	
	if event is InputEventMouseButton:
		if not room_data or highlighted_border == -1:
			return
		
		if event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
			var borders: Array[int] = room_data.borders
			room_data.borders[highlighted_border] = (borders[highlighted_border] + 1) % MetSys.settings.theme.get_border_count()
			editor.map.queue_redraw()
"

[sub_resource type="GDScript" id="GDScript_a3fsx"]
resource_name = "BorderColor"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/SubEditor.gd\"

func _editor_init() -> void:
	use_cursor = false

func _editor_enter():
	%Colors.show()

func _editor_exit():
	%Colors.hide()

func _editor_input(event: InputEvent):
	var room_data := get_room_at_cursor()
	
	if event is InputEventMouseMotion:
		if room_data:
			var rel := editor.map_overlay.get_local_mouse_position().posmodv(MetSys.ROOM_SIZE)
			var border := get_square_border_idx(rel)
			
			var new_border := -1
			var borders: Array[int] = room_data.borders
			
			for i in 4:
				if border == i and borders[i] > -1:
					new_border = border
					break
			
			if new_border != highlighted_border:
				highlighted_border = new_border
				editor.map_overlay.queue_redraw()
				
				if highlighted_border != -1 and event.button_mask & MOUSE_BUTTON_MASK_LEFT:
					room_data.border_colors[highlighted_border] = %CurrentColor.color
					editor.map.queue_redraw()
				elif highlighted_border != -1 and event.button_mask & MOUSE_BUTTON_MASK_RIGHT:
					room_data.border_colors[highlighted_border] = Color.TRANSPARENT
					editor.map.queue_redraw()
		else:
			highlighted_border = -1
			editor.map_overlay.queue_redraw()
	
	if event is InputEventMouseButton:
		if not room_data or highlighted_border == -1:
			return
		
		if event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
			if event.is_command_or_control_pressed():
				if room_data.border_colors[highlighted_border].a > 0:
					%CurrentColor.color = room_data.border_colors[highlighted_border]
			else:
				room_data.border_colors[highlighted_border] = %CurrentColor.color
				editor.map.queue_redraw()
		elif event.pressed and event.button_index == MOUSE_BUTTON_RIGHT:
			room_data.border_colors[highlighted_border] = Color.TRANSPARENT
			editor.map.queue_redraw()
		
"

[sub_resource type="GDScript" id="GDScript_p75ne"]
resource_name = "MapAssign"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/SubEditor.gd\"

func _editor_init() -> void:
	use_cursor = false

func _update_theme():
	theme_cache.assigned_room = get_theme_color(&\"assigned_room\", &\"MetSys\")

func _editor_input(event: InputEvent):
	if event is InputEventMouseMotion:
		var hr := highlighted_room
		highlighted_room = MetSys.map_data.get_whole_room(get_coords(get_cursor_pos()))
		if highlighted_room != hr:
			editor.map_overlay.queue_redraw()

	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_LEFT:
			if event.pressed:
				if not highlighted_room.is_empty():
					if %FileDialog.root_subfolder.is_empty():
						%FileDialog.root_subfolder = MetSys.settings.map_root_folder.trim_prefix(\"res://\")
					%FileDialog.popup_centered_ratio(0.6)
		elif event.button_index == MOUSE_BUTTON_RIGHT:
			var first := true
			for p in highlighted_room:
				if first:
					var assigned_map: String = MetSys.map_data.get_room_at(p).assigned_map
					MetSys.map_data.assigned_maps.erase(assigned_map)
					first = false
				
				MetSys.map_data.get_room_at(p).assigned_map = \"\"
			
			editor.map_overlay.queue_redraw()

func _editor_draw(map_overlay: CanvasItem):
	super(map_overlay)

	for room in MetSys.map_data.assigned_maps.values():
		if room[0].z != editor.current_layer:
			continue
		
		for p in room:
			map_overlay.draw_rect(Rect2(Vector2(p.x, p.y) * MetSys.ROOM_SIZE, MetSys.ROOM_SIZE), theme_cache.assigned_room)

	if not highlighted_room.is_empty():
		map_overlay.draw_set_transform_matrix(Transform2D())
		map_overlay.draw_string(get_theme_font(&\"font\", &\"Label\"), Vector2(0, 40),
				MetSys.map_data.get_room_at(highlighted_room.front()).assigned_map)

func on_map_selected(path: String) -> void:
	path = path.trim_prefix(MetSys.settings.map_root_folder)
	
	MetSys.map_data.assigned_maps[path] = []
	for coords in highlighted_room:
		MetSys.map_data.get_room_at(coords).assigned_map = path
		MetSys.map_data.assigned_maps[path].append(coords)
	
	editor.map_overlay.queue_redraw()
"

[node name="MapEditor" type="HBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_i7yda")
mode_group = SubResource("ButtonGroup_pv7fp")
metadata/_edit_lock_ = true

[node name="PanelContainer" type="PanelContainer" parent="."]
custom_minimum_size = Vector2(200, 0)
layout_mode = 2

[node name="VBoxContainer" type="VBoxContainer" parent="PanelContainer"]
layout_mode = 2

[node name="Layer" type="VBoxContainer" parent="PanelContainer/VBoxContainer"]
layout_mode = 2
mouse_filter = 2
metadata/_edit_lock_ = true

[node name="Label" type="Label" parent="PanelContainer/VBoxContainer/Layer"]
layout_mode = 2
text = "Current Layer"
horizontal_alignment = 1

[node name="CurrentLayer" type="SpinBox" parent="PanelContainer/VBoxContainer/Layer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4

[node name="Label2" type="Label" parent="PanelContainer/VBoxContainer/Layer"]
layout_mode = 2
text = "Preview Layer"
horizontal_alignment = 1

[node name="SpinBox2" type="SpinBox" parent="PanelContainer/VBoxContainer/Layer"]
layout_mode = 2
size_flags_horizontal = 4
min_value = -1.0
value = -1.0

[node name="Button" type="Button" parent="PanelContainer/VBoxContainer/Layer"]
layout_mode = 2
size_flags_horizontal = 4
text = "Recenter View"

[node name="HSeparator" type="HSeparator" parent="PanelContainer/VBoxContainer"]
layout_mode = 2

[node name="Modes" type="VBoxContainer" parent="PanelContainer/VBoxContainer"]
layout_mode = 2
alignment = 1

[node name="Label" type="Label" parent="PanelContainer/VBoxContainer/Modes"]
layout_mode = 2
text = "Mode"
horizontal_alignment = 1

[node name="RoomLayout" type="Button" parent="PanelContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_pressed = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Room Layout"
script = SubResource("GDScript_dsps8")

[node name="RoomSymbol" type="Button" parent="PanelContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Room Symbol"
script = SubResource("GDScript_ujwfx")

[node name="RoomColor" type="Button" parent="PanelContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Room Color"
script = SubResource("GDScript_tlx5u")

[node name="RoomGroup" type="Button" parent="PanelContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Room Group"
script = SubResource("GDScript_a80ln")

[node name="BorderType" type="Button" parent="PanelContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Border Type"
script = SubResource("GDScript_ilxbw")

[node name="BorderColor" type="Button" parent="PanelContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Border Color"
script = SubResource("GDScript_a3fsx")

[node name="MapAssign" type="Button" parent="PanelContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Map Assign"
script = SubResource("GDScript_p75ne")

[node name="HSeparator2" type="HSeparator" parent="PanelContainer/VBoxContainer"]
layout_mode = 2

[node name="EditControls" type="VBoxContainer" parent="PanelContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 0
mouse_filter = 2
alignment = 2
metadata/_edit_lock_ = true

[node name="Symbols" type="VBoxContainer" parent="PanelContainer/VBoxContainer/EditControls"]
unique_name_in_owner = true
visible = false
layout_mode = 2

[node name="SymbolContainer" type="HFlowContainer" parent="PanelContainer/VBoxContainer/EditControls/Symbols"]
unique_name_in_owner = true
layout_mode = 2

[node name="Groups" type="VBoxContainer" parent="PanelContainer/VBoxContainer/EditControls"]
unique_name_in_owner = true
visible = false
layout_mode = 2

[node name="Label" type="Label" parent="PanelContainer/VBoxContainer/EditControls/Groups"]
layout_mode = 2
text = "Group ID"
horizontal_alignment = 1

[node name="CurrentGroup" type="SpinBox" parent="PanelContainer/VBoxContainer/EditControls/Groups"]
unique_name_in_owner = true
layout_mode = 2

[node name="Colors" type="VBoxContainer" parent="PanelContainer/VBoxContainer/EditControls"]
unique_name_in_owner = true
visible = false
layout_mode = 2

[node name="CurrentColor" type="ColorPickerButton" parent="PanelContainer/VBoxContainer/EditControls/Colors"]
unique_name_in_owner = true
custom_minimum_size = Vector2(0, 30)
layout_mode = 2
edit_alpha = false

[node name="MapOverlay" type="Control" parent="."]
texture_filter = 1
layout_mode = 2
size_flags_horizontal = 3
script = ExtResource("2_w1wnt")

[node name="ColorRect" type="ColorRect" parent="MapOverlay"]
modulate = Color(0, 0, 0, 0.12549)
show_behind_parent = true
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2

[node name="Map" type="Control" parent="MapOverlay"]
unique_name_in_owner = true
show_behind_parent = true
clip_contents = true
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
mouse_filter = 2

[node name="GhostMap" type="Control" parent="MapOverlay"]
unique_name_in_owner = true
modulate = Color(1, 1, 1, 0.12549)
show_behind_parent = true
clip_contents = true
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
mouse_filter = 2

[node name="FileDialog" type="FileDialog" parent="."]
unique_name_in_owner = true
title = "Open a File"
size = Vector2i(345, 162)
ok_button_text = "Otwórz"
file_mode = 0
filters = PackedStringArray("*.tscn")

[connection signal="value_changed" from="PanelContainer/VBoxContainer/Layer/CurrentLayer" to="." method="layer_changed"]
[connection signal="value_changed" from="PanelContainer/VBoxContainer/Layer/SpinBox2" to="." method="preview_layer_changed"]
[connection signal="pressed" from="PanelContainer/VBoxContainer/Layer/Button" to="." method="recenter_view"]
[connection signal="value_changed" from="PanelContainer/VBoxContainer/EditControls/Groups/CurrentGroup" to="MapOverlay" method="queue_redraw" unbinds=1]
[connection signal="draw" from="MapOverlay" to="." method="_on_overlay_draw"]
[connection signal="gui_input" from="MapOverlay" to="." method="_on_map_input"]
[connection signal="draw" from="MapOverlay/Map" to="." method="_on_map_draw"]
[connection signal="draw" from="MapOverlay/GhostMap" to="." method="_on_ghost_map_draw"]
[connection signal="file_selected" from="FileDialog" to="PanelContainer/VBoxContainer/Modes/MapAssign" method="on_map_selected"]
